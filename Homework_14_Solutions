import math


class Circle:

    def __init__(self, radius):
        self.__radius = radius

    # Overloading the print method for easier testing

    def circle_area(self):
        return math.pi * self.__radius ** 2

    def __str__(self):
        return f"Circle radius: {self.__radius}\nCircle area: {math.pi * self.__radius ** 2}"

    # Checking if the circles are equal
    def __eq__(self, other):
        if isinstance(other, Circle):
            return self.circle_area() == other.circle_area()
        else:
            raise TypeError(f"{type(other)} is not the same as {type(Circle)}.")

    # Less than the other circle
    def __lt__(self, other):
        if isinstance(other, Circle):
            return self.circle_area() < other.circle_area()
        else:
            raise TypeError(f"{type(other)} is not the same as {type(Circle)}.")

    # Greater than the other circle
    def __gt__(self, other):
        if isinstance(other, Circle):
            return self.circle_area() > other.circle_area()
        else:
            raise TypeError(f"{type(other)} is not the same as {type(Circle)}.")

    # Less or equals to the other circle
    def __le__(self, other):
        if isinstance(other, Circle):
            return self.circle_area() <= other.circle_area()
        else:
            raise TypeError(f"{type(other)} is not the same as {type(Circle)}.")

    # Greater than or equal to the other circle
    def __ge__(self, other):
        if isinstance(other, Circle):
            return self.circle_area() >= other.circle_area()
        else:
            raise TypeError(f"{type(other)} is not the same as {type(Circle)}.")

    # Overloading operators, but not in place. Creating a new instance of the circle
    def __add__(self, other):
        if isinstance(other, int):
            new_radius = self.__radius + other
            return Circle(new_radius)

    def __sub__(self, other):
        if isinstance(other, int):
            new_radius = self.__radius - other
            return Circle(new_radius)

    # Overloading operators in place (should change the current circle's parameters)

    def __iadd__(self, other):
        if isinstance(other, int):
            self.__radius += other
            return self

    def __isub__(self, other):
        if isinstance(other, int):
            self.__radius -= other
            return self

circle1 = Circle(5)

# print("Checking if the comparison operators work:")
# print(circle1 <= circle2))

print("Checking if the addition works as a new object")
print(circle1)
circle2 = circle1 + 2

print("\nCircle 1")
print(circle1)
print("\nCircle 2")
print(circle2)
print("\n")

print("Checking if the addition works in place:\n")
circle1 += 4
print(f"New circle 1:\n{circle1}")

print("\nChecking if the substraction works in place:\nCircle 1:\n")
circle1 -= 3
print(circle1)


#####################################

### Task 2:

class Airplane:

    def __init__(self, passengers, max_passengers):
        self.__passengers = passengers
        self.__max_passengers = max_passengers

    def get_passengers(self):
        return self.__passengers

    def get_max_passengers(self):
        return self.__max_passengers

    def __eq__(self, other):
        if isinstance(other, Airplane):
            return self.__passengers == other.__passengers
        else:
            raise TypeError(f"{other} is not a {type(Airplane)}")

    def __add__(self, other):
        if isinstance(other, int):
            new_passenger_count = self.__passengers + other
            return Airplane(new_passenger_count)
        else:
            raise TypeError(f"{other} is not an integer.")

    def __sub__(self, other):
        if isinstance(other, int):
            new_passenger_count = self.__passengers - other
            return Airplane(new_passenger_count)
        else:
            raise TypeError(f"{other} is not an integer.")

    def __iadd__(self, other):
        if isinstance(other, int):
            self.__passengers += other
            return self
        else:
            raise TypeError(f"{other} is not an integer.")

    def __isub__(self, other):
        if isinstance(other, int):
            self.__passengers -= other
            return self
        else:
            raise TypeError(f"{other} is not an integer.")

    def __gt__(self, other):
        if isinstance(other, Airplane):
            return self.__max_passengers > other.__max_passengers
        else:
            raise TypeError(f"{other} is not a {type(Airplane)}.")

    def __lt__(self, other):
        if isinstance(other, Airplane):
            return self.__max_passengers < other.__max_passengers
        else:
            raise TypeError(f"{other} is not a {type(Airplane)}.")

    def __le__(self, other):
        if isinstance(other, Airplane):
            return self.__max_passengers <= other.__max_passengers
        else:
            raise TypeError(f"{other} is not a {type(Airplane)}.")

    def __ge__(self, other):
        if isinstance(other, Airplane):
            return self.__max_passengers >= other.__max_passengers
        else:
            raise TypeError(f"{other} is not a {type(Airplane)}.")


airplane1 = Airplane(75)
airplane2 = Airplane(100)

# Checking if they have equal number of passengers:
print(airplane1 == airplane2)
